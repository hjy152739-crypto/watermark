{
    "description": "Configuration for advanced watermark decoder with multi-watermark support",
    "decoder_configs": {
        "unet_small": {
            "decoder": "advanced",
            "decoder_architecture": "unet",
            "decoder_channels": 32,
            "use_advanced_decoder": true,
            "dbscan_epsilon": 1.0,
            "dbscan_min_samples": 50,
            "description": "Small U-Net decoder for fast inference"
        },
        "unet_standard": {
            "decoder": "advanced", 
            "decoder_architecture": "unet",
            "decoder_channels": 64,
            "use_advanced_decoder": true,
            "dbscan_epsilon": 1.0,
            "dbscan_min_samples": 100,
            "description": "Standard U-Net decoder with good accuracy"
        },
        "unet_large": {
            "decoder": "advanced",
            "decoder_architecture": "unet", 
            "decoder_channels": 128,
            "use_advanced_decoder": true,
            "dbscan_epsilon": 0.8,
            "dbscan_min_samples": 150,
            "description": "Large U-Net decoder for high accuracy"
        },
        "vit_small": {
            "decoder": "advanced",
            "decoder_architecture": "vit",
            "decoder_channels": 64,
            "use_advanced_decoder": true,
            "dbscan_epsilon": 1.2,
            "dbscan_min_samples": 80,
            "description": "Small ViT-based decoder"
        },
        "vit_standard": {
            "decoder": "advanced",
            "decoder_architecture": "vit",
            "decoder_channels": 64,
            "use_advanced_decoder": true,
            "dbscan_epsilon": 1.0,
            "dbscan_min_samples": 100,
            "description": "Standard ViT-based decoder"
        }
    },
    "usage_examples": {
        "training_with_unet": {
            "command": "python main.py --decoder advanced --decoder_architecture unet --use_advanced_decoder true --dbscan_epsilon 1.0 --dbscan_min_samples 100",
            "description": "Train with U-Net based advanced decoder"
        },
        "training_with_vit": {
            "command": "python main.py --decoder advanced --decoder_architecture vit --use_advanced_decoder true --dbscan_epsilon 1.0 --dbscan_min_samples 100",
            "description": "Train with ViT based advanced decoder"
        },
        "demo_multi_watermark": {
            "command": "python demo_multi_watermark.py --architecture unet --num_watermarks 3 --save_visualization results.png",
            "description": "Run multi-watermark extraction demo"
        }
    },
    "dbscan_parameter_guidelines": {
        "epsilon": {
            "small_images_128": "0.5 - 1.5",
            "medium_images_256": "0.8 - 2.0", 
            "large_images_512": "1.0 - 3.0",
            "description": "Distance threshold for DBSCAN clustering. Smaller values create tighter clusters."
        },
        "min_samples": {
            "small_watermarks": "50 - 150",
            "medium_watermarks": "100 - 300",
            "large_watermarks": "200 - 500",
            "description": "Minimum number of samples in a neighborhood for core point. Higher values reduce noise but may miss small watermarks."
        }
    },
    "architecture_comparison": {
        "unet": {
            "pros": [
                "Good for spatial localization",
                "Efficient training and inference",
                "Works well with skip connections",
                "Better for dense watermark detection"
            ],
            "cons": [
                "Limited global context",
                "May struggle with complex patterns"
            ],
            "best_for": "Images with spatially localized watermarks"
        },
        "vit": {
            "pros": [
                "Better global context understanding",
                "Good for complex watermark patterns", 
                "Attention mechanism helps focus on relevant regions",
                "More robust to transformations"
            ],
            "cons": [
                "Slower training and inference",
                "Requires more data",
                "Higher memory usage"
            ],
            "best_for": "Images with complex or globally distributed watermarks"
        }
    }
}

